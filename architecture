BBESC // Teensy ESC Top-level Architecture

Kernel->
	BLDC->MotorLegs								(operates motor while in BLDC mode)
		Does no coms, is switched by other softwares.
		On loops, timer calls these f'ns
		Internal f'ns block fuck ups (like outsidebounds errors, etc)
	FOC ->svpwm->t3pwm
		->t3adc
		all FOC business
	AS5047
		Reads encoder
	VSens
		Reads Voltages on ADCs
	SPB											(Serial Block and Parse || chit-chat)
		Handles incoming serial chars
	Shell										(acts like terminal, write commands here)
		No buffering, command-specific 'scripts' ... i.e. bldc calcoffset
		shell commands tend to be module-associated, should have 'help' f'ns
	Streamer									(fires data -> roboscpd for analysis)


config.h
	global vars / constants
constants.h
	maths w/o maths

Shell Commands:
	test
		-> says hello

	streamer
		-> stream status
	streamer 	start
					-> starts
				stop
					-> stops
				hz <int>
					-> <noarg> reports hz
					-> sets stream timer hz
				setvars <varset name>
					-> <noarg> reports current varset
					-> sets varset to stream

	timers 
		-> timers status
	timers 		machine 
					-> machine timers status
				machine 	hz <int>
								-> <noarg> current hz
								-> sets machine timer hz, restarts if running
				machine 	stop
								-> halts machine timer, ! KILL ALL POWER SWITCHES 1ST
				machine 	start
								-> if !started, starts
				sample
					-> sample timers status
				sample 		hz <int>
								-> <noarg> current hz
								-> sets sample timer hz
				sample 		stop
								-> halts sampling timer, ! KILL MACHINE TIMER ALSO, associated power kills
							start
								-> starts if stopped

	tr
		-> current mode, tq, dir
	tr <int> <int>
		-> duty, dir
		-> confirms
	tr 			mode
					-> gets mode
				mode <mode-id>
					-> sets mode



TBD's immediate

	Do bldc 	offset
					-> current offset is
				offset 		set <int>
								-> sets offset val in bldc
							find
								-> does offset-search routine, tells u estimate
									this will require us to come-back to a f'n ... ?
									unless we do it with slop
				reverse 
					-> current reverse value
				reverse 	set <true / false>
								-> sets reverse
							find
								-> does reverse-find routine
				active
					-> y/n

	Sampler && ADC's Sketch ->

	Can you PID position w/ BLDC ?

	-> roboscpd

	-> function test-speed of ADC && build sample-set-and-dump command :/

	Do a capture !
		-> or just do *copy current ring buffers* and dump to serial line
		-> memcpy

	Do proper-foc by watching these waveforms ~
	Optimize for speed, identify and eliminate 'knocking' in BLDC?
		-> if it works w/o knocking on a purely timing-based commutation, you have a filtering / encoder-hysterisis issue
		-> i.e. there is a point where the filtered value goes over-and-back between the 'commutate' threshold, and the motor very briefly attempts to knock between these two switched states. this is a point where you want hysterisis. 
